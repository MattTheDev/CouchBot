// <auto-generated />
using System;
using CB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CB.Data.Migrations
{
    [DbContext(typeof(CbContext))]
    [Migration("20250718014125_7172025-841p")]
    partial class _7172025841p
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CB.Data.Entities.AllowConfiguration", b =>
                {
                    b.Property<string>("GuildId")
                        .HasColumnType("text");

                    b.Property<bool>("AllowCrosspost")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowDiscordLive")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowFfa")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowGoodbyes")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowGreetings")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowLive")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowLiveDiscovery")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPublished")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowStreamVod")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowThumbnails")
                        .HasColumnType("boolean");

                    b.HasKey("GuildId");

                    b.ToTable("AllowConfigurations");
                });

            modelBuilder.Entity("CB.Data.Entities.Channel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("GuildId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("Channels", (string)null);
                });

            modelBuilder.Entity("CB.Data.Entities.ChannelConfiguration", b =>
                {
                    b.Property<string>("GuildId")
                        .HasColumnType("text");

                    b.Property<string>("DiscordLiveChannelId")
                        .HasColumnType("text");

                    b.Property<string>("GoodbyeChannelId")
                        .HasColumnType("text");

                    b.Property<string>("GreetingChannelId")
                        .HasColumnType("text");

                    b.Property<string>("LiveChannelId")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.HasIndex("DiscordLiveChannelId");

                    b.HasIndex("GoodbyeChannelId");

                    b.HasIndex("GreetingChannelId");

                    b.HasIndex("LiveChannelId");

                    b.ToTable("ChannelConfigurations", (string)null);
                });

            modelBuilder.Entity("CB.Data.Entities.ClipEmbed", b =>
                {
                    b.Property<string>("GuildId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Footer")
                        .HasColumnType("text");

                    b.Property<string>("Header")
                        .HasColumnType("text");

                    b.Property<string>("MoreButton")
                        .HasColumnType("text");

                    b.Property<string>("WatchButton")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.ToTable("ClipEmbeds");
                });

            modelBuilder.Entity("CB.Data.Entities.Creator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ChannelId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<bool>("IsLive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Creators", (string)null);
                });

            modelBuilder.Entity("CB.Data.Entities.CreatorChannel", b =>
                {
                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("ChannelId")
                        .HasColumnType("text");

                    b.Property<int>("ChannelTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomMessage")
                        .HasColumnType("text");

                    b.HasKey("CreatorId", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.ToTable("CreatorChannels");
                });

            modelBuilder.Entity("CB.Data.Entities.DiscordLiveConfiguration", b =>
                {
                    b.Property<string>("GuildId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Footer")
                        .HasColumnType("text");

                    b.Property<string>("Header")
                        .HasColumnType("text");

                    b.Property<string>("MentionRoleId")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.ToTable("DiscordLiveConfigurations");
                });

            modelBuilder.Entity("CB.Data.Entities.DropdownPayload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DropdownType")
                        .HasColumnType("text");

                    b.Property<string>("OriginalMessageId")
                        .HasColumnType("text");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DropdownPayloads");
                });

            modelBuilder.Entity("CB.Data.Entities.Filter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FilterTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("GuildId")
                        .HasColumnType("text");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FilterTypeId");

                    b.HasIndex("GuildId");

                    b.HasIndex("PlatformId");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("CB.Data.Entities.FilterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FilterType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Game"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Title"
                        });
                });

            modelBuilder.Entity("CB.Data.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("GameId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("CB.Data.Entities.GameChannel", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("ChannelId")
                        .HasColumnType("text");

                    b.HasKey("GameId", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.ToTable("GameChannels");
                });

            modelBuilder.Entity("CB.Data.Entities.Guild", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Guilds", (string)null);
                });

            modelBuilder.Entity("CB.Data.Entities.GuildConfiguration", b =>
                {
                    b.Property<string>("GuildId")
                        .HasColumnType("text");

                    b.Property<bool>("DeleteOffline")
                        .HasColumnType("boolean");

                    b.Property<bool>("TextAnnouncements")
                        .HasColumnType("boolean");

                    b.HasKey("GuildId");

                    b.ToTable("GuildConfigurations", (string)null);
                });

            modelBuilder.Entity("CB.Data.Entities.LiveEmbed", b =>
                {
                    b.Property<string>("GuildId")
                        .HasColumnType("text");

                    b.Property<string>("AverageStream")
                        .HasColumnType("text");

                    b.Property<string>("ChannelButton")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionLabel")
                        .HasColumnType("text");

                    b.Property<string>("FooterStart")
                        .HasColumnType("text");

                    b.Property<string>("FooterStopped")
                        .HasColumnType("text");

                    b.Property<string>("Header")
                        .HasColumnType("text");

                    b.Property<string>("LastStreamed")
                        .HasColumnType("text");

                    b.Property<string>("StreamDescription")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.ToTable("LiveEmbeds");
                });

            modelBuilder.Entity("CB.Data.Entities.MessageConfiguration", b =>
                {
                    b.Property<string>("GuildId")
                        .HasColumnType("text");

                    b.Property<string>("GoodbyeMessage")
                        .HasColumnType("text");

                    b.Property<string>("GreetingMessage")
                        .HasColumnType("text");

                    b.Property<string>("LiveMessage")
                        .HasColumnType("text");

                    b.Property<string>("PublishedMessage")
                        .HasColumnType("text");

                    b.Property<string>("StreamOfflineMessage")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.ToTable("MessageConfigurations", (string)null);
                });

            modelBuilder.Entity("CB.Data.Entities.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Platform");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            DisplayName = "Picarto",
                            Enabled = false
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "Piczel",
                            Enabled = false
                        },
                        new
                        {
                            Id = 6,
                            DisplayName = "Twitch",
                            Enabled = false
                        },
                        new
                        {
                            Id = 7,
                            DisplayName = "YouTube",
                            Enabled = false
                        },
                        new
                        {
                            Id = 10,
                            DisplayName = "Trovo",
                            Enabled = false
                        },
                        new
                        {
                            Id = 13,
                            DisplayName = "DLive",
                            Enabled = false
                        });
                });

            modelBuilder.Entity("CB.Data.Entities.RoleConfiguration", b =>
                {
                    b.Property<string>("GuildId")
                        .HasColumnType("text");

                    b.Property<string>("DiscoveryRoleId")
                        .HasColumnType("text");

                    b.Property<string>("JoinRoleId")
                        .HasColumnType("text");

                    b.Property<string>("LiveDiscoveryRoleId")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.ToTable("RoleConfigurations", (string)null);
                });

            modelBuilder.Entity("CB.Data.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.Property<string>("TeamId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("CB.Data.Entities.TeamChannel", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<string>("ChannelId")
                        .HasColumnType("text");

                    b.HasKey("TeamId", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.ToTable("TeamChannels");
                });

            modelBuilder.Entity("CB.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("CB.Data.Entities.VodEmbed", b =>
                {
                    b.Property<string>("GuildId")
                        .HasColumnType("text");

                    b.Property<string>("ChannelButton")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionLabel")
                        .HasColumnType("text");

                    b.Property<string>("Footer")
                        .HasColumnType("text");

                    b.Property<string>("Header")
                        .HasColumnType("text");

                    b.HasKey("GuildId");

                    b.ToTable("VodEmbeds");
                });

            modelBuilder.Entity("CB.Data.Entities.AllowConfiguration", b =>
                {
                    b.HasOne("CB.Data.Entities.Guild", "Guild")
                        .WithOne("AllowConfiguration")
                        .HasForeignKey("CB.Data.Entities.AllowConfiguration", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("CB.Data.Entities.Channel", b =>
                {
                    b.HasOne("CB.Data.Entities.Guild", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("CB.Data.Entities.ChannelConfiguration", b =>
                {
                    b.HasOne("CB.Data.Entities.Channel", "DiscordLiveChannel")
                        .WithMany()
                        .HasForeignKey("DiscordLiveChannelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CB.Data.Entities.Channel", "GoodbyeChannel")
                        .WithMany()
                        .HasForeignKey("GoodbyeChannelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CB.Data.Entities.Channel", "GreetingChannel")
                        .WithMany()
                        .HasForeignKey("GreetingChannelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CB.Data.Entities.Guild", "Guild")
                        .WithOne("ChannelConfiguration")
                        .HasForeignKey("CB.Data.Entities.ChannelConfiguration", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CB.Data.Entities.Channel", "LiveChannel")
                        .WithMany()
                        .HasForeignKey("LiveChannelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DiscordLiveChannel");

                    b.Navigation("GoodbyeChannel");

                    b.Navigation("GreetingChannel");

                    b.Navigation("Guild");

                    b.Navigation("LiveChannel");
                });

            modelBuilder.Entity("CB.Data.Entities.ClipEmbed", b =>
                {
                    b.HasOne("CB.Data.Entities.Guild", "Guild")
                        .WithOne("ClipEmbed")
                        .HasForeignKey("CB.Data.Entities.ClipEmbed", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("CB.Data.Entities.Creator", b =>
                {
                    b.HasOne("CB.Data.Entities.User", "User")
                        .WithMany("Creators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("CB.Data.Entities.CreatorChannel", b =>
                {
                    b.HasOne("CB.Data.Entities.Channel", "Channel")
                        .WithMany("CreatorChannels")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CB.Data.Entities.Creator", "Creator")
                        .WithMany("CreatorChannels")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CB.Data.Entities.DiscordLiveConfiguration", b =>
                {
                    b.HasOne("CB.Data.Entities.Guild", "Guild")
                        .WithOne("DiscordLiveConfiguration")
                        .HasForeignKey("CB.Data.Entities.DiscordLiveConfiguration", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("CB.Data.Entities.Filter", b =>
                {
                    b.HasOne("CB.Data.Entities.FilterType", "FilterType")
                        .WithMany()
                        .HasForeignKey("FilterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CB.Data.Entities.Guild", "Guild")
                        .WithMany("Filters")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CB.Data.Entities.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilterType");

                    b.Navigation("Guild");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CB.Data.Entities.Game", b =>
                {
                    b.HasOne("CB.Data.Entities.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CB.Data.Entities.GameChannel", b =>
                {
                    b.HasOne("CB.Data.Entities.Channel", "Channel")
                        .WithMany("GameChannels")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CB.Data.Entities.Game", "Game")
                        .WithMany("GameChannels")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("CB.Data.Entities.Guild", b =>
                {
                    b.HasOne("CB.Data.Entities.User", "Owner")
                        .WithMany("Guilds")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CB.Data.Entities.GuildConfiguration", b =>
                {
                    b.HasOne("CB.Data.Entities.Guild", "Guild")
                        .WithOne("GuildConfiguration")
                        .HasForeignKey("CB.Data.Entities.GuildConfiguration", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("CB.Data.Entities.LiveEmbed", b =>
                {
                    b.HasOne("CB.Data.Entities.Guild", "Guild")
                        .WithOne("LiveEmbed")
                        .HasForeignKey("CB.Data.Entities.LiveEmbed", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("CB.Data.Entities.MessageConfiguration", b =>
                {
                    b.HasOne("CB.Data.Entities.Guild", "Guild")
                        .WithOne("MessageConfiguration")
                        .HasForeignKey("CB.Data.Entities.MessageConfiguration", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("CB.Data.Entities.RoleConfiguration", b =>
                {
                    b.HasOne("CB.Data.Entities.Guild", "Guild")
                        .WithOne("RoleConfiguration")
                        .HasForeignKey("CB.Data.Entities.RoleConfiguration", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("CB.Data.Entities.Team", b =>
                {
                    b.HasOne("CB.Data.Entities.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CB.Data.Entities.TeamChannel", b =>
                {
                    b.HasOne("CB.Data.Entities.Channel", "Channel")
                        .WithMany("TeamChannels")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CB.Data.Entities.Team", "Team")
                        .WithMany("TeamChannels")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CB.Data.Entities.VodEmbed", b =>
                {
                    b.HasOne("CB.Data.Entities.Guild", "Guild")
                        .WithOne("VodEmbed")
                        .HasForeignKey("CB.Data.Entities.VodEmbed", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("CB.Data.Entities.Channel", b =>
                {
                    b.Navigation("CreatorChannels");

                    b.Navigation("GameChannels");

                    b.Navigation("TeamChannels");
                });

            modelBuilder.Entity("CB.Data.Entities.Creator", b =>
                {
                    b.Navigation("CreatorChannels");
                });

            modelBuilder.Entity("CB.Data.Entities.Game", b =>
                {
                    b.Navigation("GameChannels");
                });

            modelBuilder.Entity("CB.Data.Entities.Guild", b =>
                {
                    b.Navigation("AllowConfiguration");

                    b.Navigation("ChannelConfiguration");

                    b.Navigation("Channels");

                    b.Navigation("ClipEmbed");

                    b.Navigation("DiscordLiveConfiguration");

                    b.Navigation("Filters");

                    b.Navigation("GuildConfiguration");

                    b.Navigation("LiveEmbed");

                    b.Navigation("MessageConfiguration");

                    b.Navigation("RoleConfiguration");

                    b.Navigation("VodEmbed");
                });

            modelBuilder.Entity("CB.Data.Entities.Team", b =>
                {
                    b.Navigation("TeamChannels");
                });

            modelBuilder.Entity("CB.Data.Entities.User", b =>
                {
                    b.Navigation("Creators");

                    b.Navigation("Guilds");
                });
#pragma warning restore 612, 618
        }
    }
}
